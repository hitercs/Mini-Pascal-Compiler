#ifndef CONST_STRINGS_H
#define CONST_STRINGS_H
char pros_str[200][100] ={"","M -> \xa6\xc5","declarations -> \xa6\xc5","subprogram_declarations -> \xa6\xc5","identifier_list -> id","program -> prog id (input output ) semi M declarations subprogram_declarations compound_statement","optional_statements -> \xa6\xc5","declarations -> var declaration semi","subprogram_declarations -> subprogram_declarations subprogram_declaration semi","statement ->compound_statement","optional_statements -> statement_list","statement_list -> statement","statement ->procedure_statement","procedure_statement -> id","variable -> id","arguments -> \xa6\xc5","identifier_list -> identifier_list ,id","declaration -> identifier_list : type","type -> standard_type","standard_type -> integer","standard_type ->real","subprogram_declaration -> subprogram_head declarations compound_statement","compound_statement -> beginoptional_statements end","expression -> simple_expression","simple_expression -> term","term -> factor","factor ->id","factor -> num","sign -> +","sign -> -","statement_list -> statement_list semi statement","statement -> variableassignop expression","expression_list -> expression","simple_expression -> sign term","factor -> not factor","subprogram_head -> procedure id arguments semi","declaration -> declaration semi identifier_list : type","procedure_statement -> id ( expression_list )","variable -> id [ expression ]","expression -> simple_expressionrelop simple_expression","simple_expression -> simple_expression addop term","term -> term mulop factor","factor -> ( expression )","statement -> while expression do statement","arguments -> ( parameter_list )","expression_list -> expression_list , expression","factor -> id ( expression_list )","subprogram_head -> function id arguments : standard_type semi","parameter_list -> identifier_list : type","statement -> if expression then statement else statement","parameter_list -> parameter_list semi identifier_list : type","type -> array [ digits .. digits ] of standard_type"};
char terminals_str[200][50] = {"", "AND","ARRAY","BEGIN","CASE","CONST","DIV","DO","DOWNTO","ELSE","END","FIL","FOR","FUNC","GOTO","IF","IN","LABEL","MOD","NIL","NOT","OF","OR","PACKED","PROC","PROG","RECORD","REPEAT","SET","THEN","TO","TYPE","UNTIL","VAR","WHILE","WITH","ID","INT","REAL","STRING","PLUS","MINUS","MULTI","RDIV","EQ","LT","GT","LE","GE","NE","LR_BRAC","RR_BRAC","COMMA","P_MARK","F_STOP","RANGE","COLON","ASSIGN","SEMIC","CAP","EXP","LS_BRAC","RS_BRAC","Q_MARK","CHAR","BOOL","ENUMER","USES","OCT","HEX","ZMULOP","DIG","POS","NEG","NUM", "INPUT", "OUTPUT"};
#endif // CONST_STRINGS_H
